---
description:
globs:
alwaysApply: true
---

# PR Mode (Code Review)

Purpose: Perform a careful review of changes that are ready to push (commits present on the local branch but not on the remote). Focus on finding bugs, type issues, risky refactors, and violations of project conventions. Do not add functionality during review; only suggest minimal, safe fixes and improvements.

## Scope

- Compare `HEAD` against its upstream (e.g., `origin/<current-branch>`). Review only the diff that would be pushed.
- Include commit summaries, changed files, and unified diffs to reason about impact.

## Review Focus

- Correctness: undefined access, missing optional chaining, null guards, early returns.
- Type safety: suspicious `any`, unsafe casts, mismatched types, missing generics. Identify issues; do not run type-check commands by default.
- Project conventions: function order (high-level â†’ helpers), object parameters for 3+ args, no default exports, React rules (no React.memo, data fetching via React Query), error handling via `ts-result-custom`, logging style with concise emoji context.
- Maintainability: small focused helpers, avoid derived state, stable references.
- No new functionality: only suggest minimal fixes or refactors clearly motivated by the diff.

## Steps

1. Identify branch/upstream and commit range: `origin/<branch>..HEAD`.
2. Summarize commits and files:
   - `git status -sb`
   - `git rev-parse --abbrev-ref HEAD`
   - `git log --oneline --decorate --graph origin/$(git rev-parse --abbrev-ref HEAD)..HEAD | cat`
   - `git diff --name-only origin/$(git rev-parse --abbrev-ref HEAD)..HEAD | cat`
3. Inspect diffs (unified context) and annotate potential issues:
   - `git diff --unified=0 origin/$(git rev-parse --abbrev-ref HEAD)..HEAD | cat`
4. For changed files, check lints (without running global type-checks by default).
5. Produce a structured report (see Output) and, if helpful, update or create a root-level `code-review.md` tracker with findings and a fix plan.
6. Ask before implementing fixes. Keep suggestions minimal and focused; do not introduce new features.

## Output

- Overview: branch, upstream, N commits ahead, file count changed.
- Per-file findings:
  - Severity (High/Med/Low), category (Bug/Type/Lint/Style/Perf), brief explanation.
  - Minimal fix suggestion (and optional tiny snippet if needed).
- Risks and test impact: note affected tests or recommend adding targeted tests.
- Action checklist suitable for `code-review.md`.

## Suggested `code-review.md` tracker (root)

```markdown
# Code Review Tracker

Brief summary of the review scope (branch, upstream, date).

## Completed Tasks

- [ ]

## In Progress Tasks

- [ ]

## Findings

- file/path.ts
  - [High][Bug] Description and minimal fix idea
  - [Med][Type] Description and minimal fix idea

## Fix Plan

- Step 1: ...
- Step 2: ...

## Relevant Files

- path/to/file.ts - Purpose or impact
```

## Summon Prompt (copy/paste)

```
Enter PR Mode (Code Review).

Review only what will be pushed: compare HEAD vs upstream (origin/<current-branch>).

Goals:
- Find bugs, undefined access, missing guards, and type risks.
- Flag violations of our conventions (object params, function order, no default exports, React Query, no React.memo, ts-result-custom, logging).
- Do not add functionality. Only suggest minimal, safe fixes.
- Group findings by file with severity and brief fix suggestions.
- If useful, create/update a root `code-review.md` with Findings and Fix Plan.

Please:
1) Show branch/upstream and commits ahead (origin/<branch>..HEAD)
2) List changed files and a short commit summary
3) Analyze diffs and report findings per file
4) Output an actionable checklist I can approve before edits
```
